#use "cmeans.caml";;                                               
val distanceR2 : float list * float list -> float = <fun>
val distanceSqAllMeans : float list * float list list -> float list = <fun>
val findMin : 'a * int * int * 'a list -> int = <fun>
val listMinPos : 'a list -> int = <fun>
val elsum : float list * float list -> float list = <fun>
val scaleList : float list * int -> float list = <fun>
val createZeroesList : int * int -> float list = <fun>
val zeroes : int -> float list = <fun>
val createZeroMeansSet : int * int * int -> float list list = <fun>
val zeroMeansSet : int * int -> float list list = <fun>
val zeroVdiff : 'a list * 'a list -> bool = <fun>
val zeroSetDiff : 'a list list * 'a list list -> bool = <fun>
val createZeroCounts : int * int -> int list = <fun>
val zeroCounts : int -> int list = <fun>
val retUpdateCounts : int * int * int list -> int list = <fun>
val updateCounts : int * int list -> int list = <fun>
val retUpdateMeansSum :
  int * float list * int * float list list -> float list list = <fun>
val updateMeansSum : float list * int * float list list -> float list list =
  <fun>
val formNewMeans : float list list * int list -> float list list = <fun>
val retUpdateMeansSum :
  float list list * int list * float list list -> 'a list = <fun>
val reclassify :
  float list list * float list list * float list list * int list ->
  float list list = <fun>
val cmeans : 'a * float list list * float list list -> float list list =
  <fun>
  
-----------------------------------------------------------------------------------------------
  
3.1 distanceR2

# let v1 = [1.0;2.0;3.0];;
val v1 : float list = [1.; 2.; 3.]
# let v2= [3.0;2.0;1.0];;
val v2 : float list = [3.; 2.; 1.]
# distanceR2(v1,v2);;
- : float = 8.
# let v3=[1.0;1.0;1.0];;
val v3 : float list = [1.; 1.; 1.]
# distanceR2(v1,v3);;   
- : float = 5.

-----------------------------------------------------------------------------------------------

3.2 distanceSqAllMeans

val h : float list list =
  [[47.698002; 62.48]; [-49.005001; -41.327999]; [45.958; 29.403];
   [-60.546001; -50.702]; [45.403; 52.994999]; [-49.021; -52.053001];
   [29.788; 58.993]; [-40.433998; -36.362999]; [30.247; 46.307999]]
# let testv = List.nth h 2;;
val testv : float list = [45.958; 29.403]
# distanceSqAllMeans(testv,h);;
- : float list =
[1097.11553596000385; 14020.8457784640013; 0.; 17759.9132540079954;
 556.890441816001157; 15656.090539912002; 1137.03700000000026;
 11788.7439429000042; 532.614512190001]
# let testv2 = List.nth h 4;;
val testv2 : float list = [45.403; 52.994999]
# distanceSqAllMeans(testv2,h);;
- : float list =
[95.2322781500049587; 17809.6986045240046; 556.890441816001157;
 21978.2584145040018; 0.; 19950.97408; 279.804240996001; 15352.8420322200072;
 274.420304999999928]

-----------------------------------------------------------------------------------------------

3.3 listMinPos

# listMinPos(distanceSqAllMeans(testv,h));;
- : int = 2
# listMinPos(distanceSqAllMeans(testv2,h));;
- : int = 4

-----------------------------------------------------------------------------------------------

3.4 elsum

# elsum([1.0;2.0;3.0;4.0;],[6.0;7.0;8.0;9.0;]);;
- : float list = [7.; 9.; 11.; 13.]
# elsum([1.0;1.0;1.0;1.0;],[6.0;7.0;8.0;9.0;]);;
- : float list = [7.; 8.; 9.; 10.]

-----------------------------------------------------------------------------------------------

3.5 scaleList

# scaleList([1.0;2.0;3.0],10);;
- : float list = [0.1; 0.2; 0.3]
# scaleList([1.0;2.0;3.0],0);; 
- : float list = [1.; 2.; 3.]

-----------------------------------------------------------------------------------------------

3.6 zeroes

# zeroes(10);;
- : float list = [0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.; 0.]
# zeroes(2);; 
- : float list = [0.; 0.]

-----------------------------------------------------------------------------------------------

3.7 zeroMeansSet

# zeroMeansSet(4,5);;
- : float list list =
[[0.; 0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.; 0.]; [0.; 0.; 0.; 0.; 0.];
 [0.; 0.; 0.; 0.; 0.]]
# zeroMeansSet(3,1);;
- : float list list = [[0.]; [0.]; [0.]]

-----------------------------------------------------------------------------------------------

3.8 zeroVdiff

# zeroVdiff([1.0;2.0;3.0],[1.0;2.0;3.0]);;
- : bool = true
# zeroVdiff([1.0;2.0;3.0],[1.0;0.0;3.0]);;
- : bool = false

-----------------------------------------------------------------------------------------------

3.9 zeroSetDiff

# zeroSetDiff([[1;2;3];[1;2;4]],[[1;2;3];[1;2;3]]);;
- : bool = false
# zeroSetDiff([[1;2;3];[1;2;3]],[[1;2;3];[1;2;3]]);;
- : bool = true

-----------------------------------------------------------------------------------------------

3.10 zeroCounts

# zeroCounts(6);;
- : int list = [0; 0; 0; 0; 0; 0]
# zeroCounts(2);; 
- : int list = [0; 0]

-----------------------------------------------------------------------------------------------

3.11 updateCounts

# updateCounts(3,zeroCounts(6));;
- : int list = [0; 0; 0; 1; 0; 0]
# updateCounts(3,updateCounts(3,zeroCounts(6)));;
- : int list = [0; 0; 0; 2; 0; 0]

-----------------------------------------------------------------------------------------------

4.1 updateMeansSum

# updateMeansSum([1.0;2.0;3.0],2,zeroMeansSet(4,3));;
- : float list list =
[[0.; 0.; 0.]; [0.; 0.; 0.]; [1.; 2.; 3.]; [0.; 0.; 0.]]
# updateMeansSum([1.0;2.0;3.0],0,zeroMeansSet(4,3));;
- : float list list =
[[1.; 2.; 3.]; [0.; 0.; 0.]; [0.; 0.; 0.]; [0.; 0.; 0.]]

-----------------------------------------------------------------------------------------------

4.2 formNewMeans

# formNewMeans([[100.5];[-29.1]],[3;5]);;
- : float list list = [[33.5]; [-5.82]]
# formNewMeans([[14.2];[-139.9]],[7;10]);;
- : float list list = [[2.02857142857142847]; [-13.99]]

-----------------------------------------------------------------------------------------------

4.3 reclassify

# let muzero = [[-57.244999; -43.969002]; [-68.746002; -55.521999]];;
val muzero : float list list =
  [[-57.244999; -43.969002]; [-68.746002; -55.521999]]
# let h =[
[47.698002; 62.480000];
[-49.005001; -41.327999];
[45.958000; 29.403000];
[-60.546001; -50.702000];
[45.403000; 52.994999];
[-49.021000; -52.053001];
[29.788000; 58.993000];
[-40.433998; -36.362999];
[30.247000; 46.307999];
[-56.348000; -68.390999];
[39.306000; 55.344002];
[-36.924999; -62.708000];
                          [67.416000; 44.914001];
  [-58.917999; -59.022999];
  [61.311001; 49.091000];
  [-48.459999; -48.293999];
  [40.199001; 42.499001];
  [-44.012001; -45.372002];
  [56.061001; 42.375000];
  [-41.471001; -61.914001];
  [38.374001; 69.296997];
  [-72.792999; -38.757999];
  [45.792999; 45.402000];
  [-49.188000; -26.427000];
  [52.728001; 47.167000];
  [-32.636002; -48.605000];
  [45.199001; 42.932999];
  [-60.687000; -62.403000];
  [47.764999; 46.527000];
  [-44.400002; -56.611000];
  [34.199001; 38.139999];
  [-46.271000; -59.549999];
  [30.365999; 34.556999];
  [-44.353001; -35.251999];
  [61.408001; 49.321999];
  [-54.328999; -57.067001];
  [44.124001; 53.855999];
  [-40.675999; -45.154999];
  [59.542999; 52.754002];
  [-51.820999; -54.581001];
  [57.674999; 43.550999];
  [-58.657001; -62.026001];
  [46.997002; 49.679001];
  [-48.159000; -60.401001];
  [58.990002; 44.980000];
  [-53.952000; -48.452999];
  [51.668999; 46.544998];
  [-44.797001; -39.198002];
  [21.613001; 58.493999];
  [-39.870998; -70.129997];
  [38.344002; 64.382004];
  [-36.939999; -49.074001];
  [43.955002; 70.141998];
  [-66.225998; -39.280998];
  [34.042000; 43.935001];
  [-56.077999; -41.220001];
  [40.556999; 60.946999];
  [-45.368000; -55.077999];
  [51.587002; 54.707001];
  [-44.653999; -59.618999];
  [45.764000; 67.897003];
  [-53.721001; -41.657001];
  [48.812000; 30.231001];
  [-51.667999; -59.210999];
  [28.068001; 50.791000];
  [-52.210999; -44.290001];
  [39.919998; 60.792999];
  [-66.524002; -65.376999];
  [51.550999; 55.782001];
  [-71.337997; -50.605000];
  [44.178001; 32.618000];
  [-50.681000; -67.092003];
  [56.460999; 46.509998];
  [-57.506001; -40.686001];
  [46.271999; 59.300999];
  [-47.286999; -61.171001];
  [51.985001; 46.272999];
  [-53.939999; -48.959999];
  [40.096001; 61.334000];
  [-46.508999; -32.176998];
  [46.028999; 53.800999];
  [-47.521999; -56.674000];
  [58.344002; 35.938999];
  [-41.748001; -48.055000];
  [66.002998; 50.168999];
  [-54.241001; -50.398998];
  [63.778999; 46.206001];
  [-39.025002; -54.013000];
  [44.758999; 46.389999];
  [-65.059998; -48.220001];
  [62.169998; 53.400002];
  [-48.840000; -72.205002];
  [40.101002; 44.834000];
  [-61.758999; -54.951000];
  [44.448002; 58.359001];
  [-30.670000; -65.568001];
  [48.205002; 39.977001];
  [-61.874001; -62.702000];
  [53.289001; 53.289001];
  [-57.244999; -43.969002];
  [55.994999; 38.414001];
  [-48.673000; -33.039001];
  [35.344002; 42.363998];
  [-66.481003; -64.532997];
  [43.299999; 57.294998];
  [-62.358002; -36.323002];
  [38.619999; 48.984001];
  [-50.965000; -50.571999];
  [40.485001; 41.769001];
  [-61.761002; -46.075001];
  [53.627998; 47.325001];
  [-61.771999; -50.054001];
  [38.381001; 45.063999];
  [-32.745998; -57.668999];
  [52.150002; 51.006001];
  [-39.744999; -45.480000];
  [53.068001; 36.501999];
  [-60.948002; -51.914001];
  [52.412998; 28.235001];
  [-56.820000; -62.063000];
  [51.967999; 37.012001];
  [-51.937000; -53.951000];
  [42.764000; 74.032997];
  [-50.091999; -45.292000];
  [46.608002; 44.979000];
  [-36.820000; -58.584999];
  [39.368999; 52.562000];
  [-44.917999; -58.778000];
  [59.801998; 56.983002];
  [-51.596001; -37.806999];
  [51.601002; 46.477001];
  [-54.457001; -45.686001];
  [44.883999; 43.805000];
  [-50.540001; -47.098000];
  [52.888000; 55.015999];
  [-55.118999; -74.000999];
  [57.549000; 51.905998];
  [-66.028999; -59.264999];
  [51.507000; 46.372002];
  [-48.362999; -43.660000];
  [46.008999; 51.356998];
  [-47.964001; -39.564999];
  [65.483002; 44.848999];
  [-55.983002; -48.618999];
  [36.493999; 44.080002];
  [-43.905998; -38.171001];
  [49.609001; 39.153000];
  [-57.262001; -46.182999];
  [49.320000; 27.771000];
  [-44.473000; -43.089001];
  [41.689999; 35.741001];
  [-45.971001; -56.252998];
  [57.991001; 54.146000];
  [-43.407001; -64.523003];
  [29.247999; 50.339001];
  [-45.730999; -34.008999];
  [49.478001; 42.424000];
  [-43.452000; -55.080002];
  [50.530998; 54.761002];
  [-51.806999; -61.610001];
  [35.896000; 57.237999];
  [-52.354000; -49.441002];
  [59.084999; 38.363998];
  [-54.158001; -47.296001];
  [48.414001; 36.998001];
  [-54.292000; -70.766998];
  [60.088001; 37.308998];
  [-52.443001; -78.668999];
  [64.397003; 55.303001];
  [-55.419998; -44.888000];
  [52.612999; 52.653000];
  [-47.648998; -44.060001];
  [48.056999; 73.278000];
  [-39.168999; -44.511002];
  [44.278000; 64.654999];
  [-39.837002; -64.285004];
  [40.255001; 68.907997];
  [-38.571999; -55.199001];
  [51.416000; 49.426998];
  [-48.370998; -56.042000];
  [60.019001; 56.022999];
  [-73.535004; -48.645000];
  [58.090000; 32.983002];
  [-62.123001; -65.014999];
  [51.075001; 61.535999];
  [-56.089001; -64.358002];
  [56.133999; 55.541000];
  [-46.181000; -58.021999];
  [55.351002; 45.152000];
  [-48.125000; -51.327000];
  [74.464996; 53.213001];
  [-47.492001; -55.717999];
  [55.716000; 46.556999];
  [-47.737999; -67.221001];
  [44.997002; 41.153000];
  [-61.254002; -64.741997];
  [42.384998; 54.869999];
  [-48.435001; -54.327000];
  [68.799004; 44.391998];
  [-68.746002; -55.521999];
  ];;
val h : float list list =
  [[47.698002; 62.48]; [-49.005001; -41.327999]; [45.958; 29.403];
   [-60.546001; -50.702]; [45.403; 52.994999]; [-49.021; -52.053001];
   [29.788; 58.993]; [-40.433998; -36.362999]; [30.247; 46.307999];
   [-56.348; -68.390999]; [39.306; 55.344002]; [-36.924999; -62.708];
   [67.416; 44.914001]; [-58.917999; -59.022999]; [61.311001; 49.091];
   [-48.459999; -48.293999]; [40.199001; 42.499001];
   [-44.012001; -45.372002]; [56.061001; 42.375]; [-41.471001; -61.914001];
   [38.374001; 69.296997]; [-72.792999; -38.757999]; [45.792999; 45.402];
   [-49.188; -26.427]; [52.728001; 47.167]; [-32.636002; -48.605];
   [45.199001; 42.932999]; [-60.687; -62.403]; [47.764999; 46.527];
   [-44.400002; -56.611]; [34.199001; 38.139999]; [-46.271; -59.549999];
   [30.365999; 34.556999]; [-44.353001; -35.251999]; [61.408001; 49.321999];
   [-54.328999; -57.067001]; [44.124001; 53.855999];
   [-40.675999; -45.154999]; [59.542999; 52.754002];
   [-51.820999; -54.581001]; [57.674999; 43.550999];
   [-58.657001; -62.026001]; [46.997002; 49.679001]; [-48.159; -60.401001];
   [58.990002; 44.98]; [-53.952; -48.452999]; [51.668999; 46.544998];
   [-44.797001; -39.198002]; [21.613001; 58.493999];
   [-39.870998; -70.129997]; [38.344002; 64.382004];
   [-36.939999; -49.074001]; [43.955002; 70.141998];
   [-66.225998; -39.280998]; [34.042; 43.935001]; [-56.077999; -41.220001];
   [40.556999; 60.946999]; [-45.368; -55.077999]; [51.587002; 54.707001];
   [-44.653999; -59.618999]; [45.764; 67.897003]; [-53.721001; -41.657001];
   [48.812; 30.231001]; [-51.667999; -59.210999]; [28.068001; 50.791];
   [-52.210999; -44.290001]; [39.919998; 60.792999];
   [-66.524002; -65.376999]; [51.550999; 55.782001]; [-71.337997; -50.605];
   [44.178001; 32.618]; [-50.681; -67.092003]; [56.460999; 46.509998];
   [-57.506001; -40.686001]; [46.271999; 59.300999];
   [-47.286999; -61.171001]; [51.985001; 46.272999];
   [-53.939999; -48.959999]; [40.096001; 61.334]; [-46.508999; -32.176998];
   [46.028999; 53.800999]; [-47.521999; -56.674]; [58.344002; 35.938999];
   [-41.748001; -48.055]; [66.002998; 50.168999]; [-54.241001; -50.398998];
   [63.778999; 46.206001]; [-39.025002; -54.013]; [44.758999; 46.389999];
   [-65.059998; -48.220001]; [62.169998; 53.400002]; [-48.84; -72.205002];
   [40.101002; 44.834]; [-61.758999; -54.951]; [44.448002; 58.359001];
   [-30.67; -65.568001]; [48.205002; 39.977001]; [-61.874001; -62.702];
   [53.289001; 53.289001]; [-57.244999; ...]; ...]
# let mu1=reclassify(h,muzero,zeroMeans(2,2),zeroCounts(2));;
Error: Unbound value zeroMeans
Hint: Did you mean zeroMeansSet or zeroes?
# let mu1=reclassify(h,muzero,zeroMeansSet(2,2),zeroCounts(2));;
val mu1 : float list list = []
# let mu2=reclassify(h,muzero,zeroMeansSet(2,2),zeroCounts(2));;
val mu2 : float list list = []
# let mu2=reclassify(h,muzero,zeroMeansSet(3,3),zeroCounts(3));;
val mu2 : float list list = []

-----------------------------------------------------------------------------------------------

4.4 cmeans

# cmeans(2,h,muzero);;
- : float list list = []
# cmeans(4,h,muzero);;                                          
- : float list list = []
# cmeans(2,h,muzero);;
- : float list list = []
# cmeans(20,h,muzero);;
- : float list list = []
# cmeans(21,h,muzero);;
- : float list list = []
# cmeans(10,h,muzero);;
- : float list list = []


